{% set name = "dgl" %}
{% set version = "2.1.0" %}
{% set torch_proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/dmlc/dgl/archive/v{{ version }}.tar.gz
    sha256: ad540fd93985d7242dc79db39b76c2a3ab1da5aceb06839fecc99edfb070fe81
    patches:
      - fix_clang_errors.patch
      - fix_libdgl_sparse_pytorch_location_logic.patch
      - control_make_parallelism.patch
      - use-system-liburing.patch  # [linux]
      - pytorch-version-post.patch

  - url: https://github.com/imneme/pcg-cpp/archive/428802d1a5634f96bcd0705fab379ff0113bcf13.tar.gz
    sha256: 79f23706ed0cbc1bb57ea35d50d0abed66898b8f7b0bcf2aaecdfd234863b060
    folder: third_party/pcg

  - url: https://github.com/libxsmm/libxsmm/archive/80090603e43f6ddc870cc42e1403dd0af07744cc.tar.gz
    sha256: 5ee733ccbfe8b79f61e4ea87e5defbbaf51f80a851eb3cf00a0946e4d230d999
    folder: third_party/libxsmm

  - url: https://github.com/NVIDIA/cccl/archive/4d5c181cb4e67b14e7d1fdeb45cf0104119bfb09.tar.gz
    sha256: 59bcccb6d7c054323fafb76ff0932c33ed9c3fac969c3eef2a521ad0980639fc
    folder: third_party/cccl

build:
  skip: true  # [win or py<39]
  number: 2
  rpaths:
    - lib/
      # PyTorch libs are in site-packages instead of with other shared objects
    - {{ SP_DIR }}/torch/lib/
      # DGL libs are in site-packages instead of with other shared objects
    - {{ SP_DIR }}/dgl/
  missing_dso_whitelist:
    - '*/libcuda.*'  # [linux64]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  ignore_run_exports:
    - gklib

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython <3                              # [build_platform != target_platform]
    - pytorch                                # [build_platform != target_platform]
    - pytorch =*=*{{ torch_proc_type }}*     # [build_platform != target_platform]
    - libtorch                               # [build_platform != target_platform]
    - cmake >=3.20
    - git
    - libgomp      # [linux]
    - llvm-openmp  # [osx]
    - make
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]
    - {{ compiler('cxx') }}
  host:
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')]
    - cudnn                                     # [cuda_compiler_version not in (undefined, 'None')]
    - cython <3
    - dlpack ==0.7
    - dmlc ==0.5
    - gklib ==5.1.1  # https://github.com/conda-forge/conda-forge-pinning-feedstock/pull/5396#issuecomment-1900607226
    - libblas
    - libcublas-dev      # [(cuda_compiler_version or "").startswith("12")]
    - libcufft-dev       # [(cuda_compiler_version or "").startswith("12")]
    - libcurand-dev      # [(cuda_compiler_version or "").startswith("12")]
    - libcusolver-dev    # [(cuda_compiler_version or "").startswith("12")]
    - libcusparse-dev    # [(cuda_compiler_version or "").startswith("12")]
    - cuda-cudart-dev    # [(cuda_compiler_version or "").startswith("12")]
    - cuda-nvrtc-dev     # [(cuda_compiler_version or "").startswith("12")]
    - cuda-nvtx-dev      # [(cuda_compiler_version or "").startswith("12")]
    - libcblas
    - liblapack
    - liblapacke
    - liburing  # [linux]
    - metis ==5.1.1
    - nanoflann <=1.4.2
    - parallel-hashmap
    - python
    - pip
    - libtorch
    - pytorch  # duplicate dep to pick up conda-forge pinnings
    - pytorch =*=*{{ torch_proc_type }}*
    - setuptools
  run:
    - networkx >=2.1
    - numpy >=1.14.0
    - pandas  # not a core dependency, but leaks in the 'import dgl' test via dgl.data 
    - psutil >=5.8.0
    - python
    - {{ pin_compatible("pytorch", exact=True) }}=*{{ torch_proc_type }}*
    - requests >=2.19.0
    - scipy >=1.1.0
    - tensorflow
    - torchdata >=0.5.0
    - tqdm
    - pyyaml
    - pydantic

test:
  requires:
    - pip
    - pyyaml
    - pydantic
  imports:
    - dgl
    - dgl.sparse
  commands:
    - pip check || true  # Get the output of pip check but don't care if it fails
    - python -c "import dgl"

about:
  home: https://github.com/dmlc/dgl
  license: Apache-2.0
  license_file:
    - LICENSE
    - third_party/pcg/LICENSE-APACHE.txt
    - third_party/pcg/LICENSE-MIT.txt
    - third_party/libxsmm/LICENSE.md
    - third_party/cccl/LICENSE
    - HugeCTR_gpu_cache_license.txt
  summary: A deep graph library
  description: |
    DGL is an easy-to-use, high performance and scalable Python package for deep
     learning on graphs. DGL is framework agnostic, meaning if a deep graph
     model is a component of an end-to-end application, the rest of the logics
     can be implemented in any major frameworks, such as PyTorch, Apache MXNet
     or TensorFlow.
  doc_url: https://docs.dgl.ai/en/latest/

extra:
  recipe-maintainers:
    - frozenbugs
    - mikemhenry
    - hmacdope
    - zklaus
